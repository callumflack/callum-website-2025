---
description: how to calculate CSS `clamp()` values for responsive typography and spacing that scales linearly between two viewport breakpoints
globs: 
alwaysApply: false
---
# CSS Clamp Calculations

This document explains how to calculate CSS `clamp()` values for responsive typography and spacing that scales linearly between two viewport breakpoints.

## Understanding CSS Clamp

The `clamp()` function takes three values:

```css
clamp(minimum, preferred, maximum)
```

- **minimum**: The smallest value (lower bound)
- **preferred**: A flexible value (usually with viewport units)
- **maximum**: The largest value (upper bound)

## Manual Calculation Formula

To create a linear scale between two viewport widths:

### Given Values

- `minViewportWidth`: Starting viewport width (px)
- `maxViewportWidth`: Ending viewport width (px)  
- `minSize`: Size at minimum viewport (px)
- `maxSize`: Size at maximum viewport (px)

### Calculation Steps

1. **Calculate the slope (rate of change per viewport unit):**

   ```
   slope = (maxSize - minSize) / (maxViewportWidth - minViewportWidth)
   ```

2. **Calculate the y-intercept (base value):**

   ```
   yIntercept = minSize - (slope × minViewportWidth)
   ```

3. **Convert slope to vw units:**

   ```
   slopeVw = slope × 100
   ```

4. **Build the clamp expression:**

   ```css
   clamp(minSize px, yIntercept px + slopeVw vw, maxSize px)
   ```

## Example: Spacing Inset Calculation

For `--spacing-inset` scaling from 15px at 500px viewport to 24px at 1200px viewport:

### Input Values

- `minViewportWidth`: 500px
- `maxViewportWidth`: 1200px
- `minSize`: 15px
- `maxSize`: 24px

### Calculations

1. **Slope:** `(24 - 15) / (1200 - 500) = 9 / 700 = 0.012857`
2. **Y-intercept:** `15 - (0.012857 × 500) = 15 - 6.4285 = 8.5715`
3. **Slope in vw:** `0.012857 × 100 = 1.2857vw`

### Result

```css
--spacing-inset: clamp(15px, 8.5714px + 1.2857vw, 24px);
```

### Verification

- At 500px: `8.5714 + 1.2857 × (500÷100) = 8.5714 + 6.4285 = 15.00px` ✅
- At 1200px: `8.5714 + 1.2857 × (1200÷100) = 8.5714 + 15.4284 = 24.00px` ✅

## Utility Function

Use the `generateClampSize` utility to automate these calculations:

```typescript
import { generateClampSize } from '@/lib/utils/generate-clamp-size'

// Generate clamp for spacing-inset
const spacingInset = generateClampSize(500, 1200, 15, 24)
// Returns: "clamp(15px, 8.5714px + 1.2857vw, 24px)"

// Generate clamp for text scaling
const titleSize = generateClampSize(375, 1440, 28, 48)
// Returns: "clamp(28px, 10.3286px + 4.6948vw, 48px)"
```

### Function Implementation

```typescript
export function generateClampSize(
  minViewportWidth: number,
  maxViewportWidth: number,
  minFontSize: number,
  maxFontSize: number
): string {
  const minClampValue = `${minFontSize}px`;
  const maxClampValue = `${maxFontSize}px`;

  const fontSizeDiff = maxFontSize - minFontSize;
  const viewportWidthDiff = maxViewportWidth - minViewportWidth;

  const slope = fontSizeDiff / viewportWidthDiff;
  const yIntercept = minFontSize - slope * minViewportWidth;

  const clampExpression = `${yIntercept.toFixed(4)}px + ${(slope * 100).toFixed(
    4
  )}vw`;

  return `clamp(${minClampValue}, ${clampExpression}, ${maxClampValue})`;
}
```

## Common Viewport Breakpoints

- **Mobile First:** 375px → 768px
- **Mobile to Desktop:** 375px → 1440px  
- **Tablet to Desktop:** 768px → 1200px
- **Custom Range:** 500px → 1200px (current project)

## Best Practices

1. **Always test** your clamp values at the min/max viewports
2. **Use meaningful breakpoints** that match your design system
3. **Consider accessibility** - ensure text remains readable at all sizes
4. **Round carefully** - too many decimals can cause browser inconsistencies
5. **Document your calculations** for future maintenance

## Tools & Resources

- [Clamp Calculator](mdc:https:/clamp.font-size.app) - Visual clamp generator
- [Modern Fluid Typography](mdc:https:/modern-fluid-typography.vercel.app) - Another calculator
- Browser DevTools for testing across viewport sizes
